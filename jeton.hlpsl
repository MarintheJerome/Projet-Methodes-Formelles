%% PROTOCOL: NSPK: Needham-Schroeder Public-Key Protocol
%% VARIANT: original version (of 1978) without key server
%% PURPOSE: Two-party mutual autentication
%% ALICE_BOB:
%% C → J : {Nc.C, PKc}_PKj
%% J → C : {Nc.Nj}_PKc
%% C → J : {Nj}_PKj
%% J → C : {type, Jeton}_PKc
%% C → S : {Nc_2.C, PKc, Jeton}_PKs
%% S → J : {Jeton}_PKj
%% J → S : {ok?}_PKs
%% S → C : {NC_2.c, ok, Ns}_PKc
%% C → S : {Ns}_PKs%% 1. A  - {Na.A}_PKb ----> B
%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% role client
role client(C, J, S: agent,             
            PKc, PKj, PKs, PKca: public_key,
	    CertC: {agent.public_key}_inv(public_key),
            SND, RCV: channel(dy)) 
played_by C def=

  local State: nat, 
        Nc, Nj, Nc2, Ns, Jeton: text,
	Ok, Ok2: bool

%% Gérer le stock

  init State:=0

  transition  
   
   
    0. State=0 /\ RCV(start) =|> 
       State':=1 /\  SND(CertC) 

    1. State=1 /\ RCV({Nj'}_PKc) =|> 
       State':=2 /\ Nc':=new() /\ SND({Nc'.Nj'}_PKj) /\ witness(C, J, client_jeton_nc, Nc') /\ secret(Nc', nc, {C,J}) /\ request(J, C, jeton_client_nj, Nj')

    2. State=2 /\ RCV({Nc.Ok'.Jeton'}_PKc) /\ Ok' = true =|>
       State':=3 /\ SND(CertC.auth) 

    3. State=3 /\ RCV({Ns'}_PKc) =|>
       State':=4 /\ Nc2':=new() /\ SND({Nc2'.Ns'.Jeton}_PKs) /\ witness(C, S, client_service_nc2, Nc2') /\ secret(Nc2', nc2, {C, S}) /\ request(S, C, service_client_ns, Ns')

    4. State=4 /\ RCV({Nc2.Ok2'}_PKc) /\ Ok2' = true =|>
	State':=5 

   nopeJeton. State=2 /\ RCV({Nc.Ok'}_PKc) /\ Ok' = false =|> 
	State':=99

   incorrectJeton. State=4 /\ RCV({Nc2.Ok2'}_PKc) /\ Ok2' = false =|>
	State':=99

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% role jeton à écrire
role jeton (J: agent,             
            PKj, PKca: public_key,
            SND, RCV: channel(dy)) 
played_by J def=

  local State: nat, 
	C, S: agent,
        Nc, Nj, Nc2: text,
	Ok, Ok2: bool,
	Jeton: text,
	PKc, PKs: public_key

%% Gérer le stock

  init State:=0

  transition  
   
    0.  State=0 /\ RCV({C'.PKc'}_inv(PKca)) =|> 
	State':=1 /\ Nj':=new() /\ SND({Nj'}_PKc') /\ secret(Nj', nj, {J,C'}) /\ witness(J, C', jeton_client_nj, Nj')


    1.  State=1 /\ RCV({Nc'.Nj}_PKj) =|> 
	State':=2 /\ Jeton':= new() /\ SND({Nc'.true.Jeton'}_PKc) /\ secret(Jeton', jeton, {J, S,C}) /\ request(C, J, client_jeton_nc, Nc')

    2.  State=2 /\ RCV({S'.PKs'}_inv(PKca).{Jeton}_PKj) =|> 
	State':=3 /\ SND({true}_PKs')


end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% role service à écrire
role service(C, J, S: agent,             
            PKj, PKs, PKca: public_key,      
            SND, RCV: channel(dy)) 
played_by S def=

  local State: nat, 
        Nc2, Ns: text,
	Ok: bool,
	Jeton: text,
	PKc: public_key

%% Gérer le stock

  init State:=0

  transition  
   
    0. State=0 /\ RCV({C.PKc'}_inv(PKca).auth) =|> 
	 State':=1 /\ Ns':= new() /\ SND({Ns'}_PKc') /\ witness(S, C, service_client_ns, Ns') /\ secret(Ns', ns, {S,C}) 

    1.  State=1 /\ RCV({Nc2'.Ns.Jeton'}_PKs) =|> 
	State':=2 /\ SND({Jeton'}_PKj) /\ request(C, S, client_service_nc2, Nc2')


    2.  State=2 /\ RCV({Ok'}_PKs) /\ Ok' = true  =|>  
	State':=3 /\ SND({Nc2.Ok'}_PKc) 


 jetoninvalide. State=2 /\ RCV({Ok'}_PKs) /\ Ok' = false =|>
	State':=99 /\ SND({Nc2.Ok'}_PKc)

end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle caractérisant une session
role createClient(C, J, S: agent, PKc, PKj, PKs, PKca: public_key) def=

  local SC, RC: channel(dy)

  composition 
	client(C, J, S, PKc, PKj, PKs, PKca, {C.PKc}_inv(PKca), SC, RC)
end role

role createJeton(J: agent, PKj, PKca: public_key) def=

  local SC, RC: channel(dy)

  composition 
     jeton(J, PKj, PKca, SC, RC)
end role


role createService(C, J, S: agent, PKj, PKs, PKca: public_key) def=

  local SC, RC: channel(dy)

  composition 
     service(C, J, S, PKj, PKs, PKca, SC, RC)
end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle caractérisant le scenario à exécuter
role environment() def=

    const c, j, s, c1, c2, i, s1: agent,
	  pkc, pkj, pkj, pki, pkca, pkc1, pkc2, pki, pks, pks1: public_key,
	  nc, nc2, nj, ns, jeton,
 	  client_jeton_nc, jeton_client_nj,
	  client_service_nc2, service_client_ns: protocol_id,
	  true, false: bool,
	  auth: text

    intruder_knowledge = {c, j, s, pkj, pks, pks1, pki, inv(pki), pkca}

    composition
%%	session(a,b,pka,pkb)

	 createClient(c, j, s, pkc, pkj, pks, pkca)
%     /\ createClient(c1, j, s, pkc1, pkj, pks, pkca)
%     /\ createClient(c2, j, s, pkc2, pkj, pks, pkca)
%     /\ createClient(c, j, s1, pkc, pkj, pks1, pkca)
%     /\ createClient(c1, j, s1, pkc1, pkj, pks1, pkca)
%     /\ createClient(c2, j, s1, pkc2, pkj, pks1, pkca)
     /\   createJeton(j, pkj, pkca)
     /\ createService(c, j, s, pkj, pks, pkca)
%     /\ createService(c1, j, s, pkj, pks, pkca)
%     /\ createService(c2, j, s, pkj, pks, pkca)
%    /\ createService(c, j, s1, pkj, pks1, pkca) 
%   /\ createService(c1, j, s1, pkj, pks1, pkca)
%    /\ createService(c2, j, s1, pkj, pks1, pkca)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% pour l'instant, pas de section goal ici (donc pas de propriété à vérifier)
goal
  secrecy_of nc
  secrecy_of nc2
  secrecy_of nj
  secrecy_of ns
  secrecy_of jeton
  authentication_on client_jeton_nc
  authentication_on jeton_client_nj
  authentication_on client_service_nc2
  authentication_on service_client_ns
end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% lancement du rôle principal
environment()
